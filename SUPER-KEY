1. Accessing Superclass Methods
When a method in the subclass overrides a method in the superclass, you can use super to call the overridden method from the superclass.

class Animal {
    void display() {
        System.out.println("I am an animal");
    }
}

class Dog extends Animal {
    @Override
    void display() {
        System.out.println("I am a dog");
    }

    void printMessage() {
        display(); // Calls the overridden method in Dog
        super.display(); // Calls the method in Animal
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.printMessage();
    }
}
OUTPUT:

I am a dog
I am an animal

2. Accessing Superclass Attributes
If the superclass and subclass have attributes with the same name, you can use super to access the attribute from the superclass

class Animal {
    String type = "animal";
}

class Dog extends Animal {
    String type = "mammal";

    void printType() {
        System.out.println("I am a " + type); // Refers to Dog's type
        System.out.println("I am an " + super.type); // Refers to Animal's type
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.printType();
    }
}

OUTPUT:
I am a mammal
I am an animal


3. Calling Superclass Constructors
You can use super to call a constructor of the superclass from the subclass constructor. This is useful for initializing the superclass part of the subclass object.

class Animal {
    Animal(String name) {
        System.out.println("Animal constructor called: " + name);
    }
}

class Dog extends Animal {
    Dog(String name) {
        super(name); // Calls the constructor of Animal
        System.out.println("Dog constructor called: " + name);
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog("Buddy");
    }
}

OUTPUT:
Animal constructor called: Buddy
Dog constructor called: Buddy

